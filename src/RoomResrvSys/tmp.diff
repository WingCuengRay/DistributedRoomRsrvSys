diff --git a/src/RemoteInterface/ListOfBoolHelper.java b/src/RemoteInterface/ListOfBoolHelper.java
index 6ce8169..a9746c9 100644
--- a/src/RemoteInterface/ListOfBoolHelper.java
+++ b/src/RemoteInterface/ListOfBoolHelper.java
@@ -5,7 +5,7 @@ package RemoteInterface;
 * RemoteInterface/ListOfBoolHelper.java .
 * Generated by the IDL-to-Java compiler (portable), version "3.2"
 * from ./ServerRemote.idl
-* Wednesday, October 18, 2017 11:28:08 PM EDT
+* Saturday, October 21, 2017 12:57:13 AM EDT
 */
 
 abstract public class ListOfBoolHelper
diff --git a/src/RemoteInterface/ListOfBoolHolder.java b/src/RemoteInterface/ListOfBoolHolder.java
index b6e887b..3e5a9cd 100644
--- a/src/RemoteInterface/ListOfBoolHolder.java
+++ b/src/RemoteInterface/ListOfBoolHolder.java
@@ -5,7 +5,7 @@ package RemoteInterface;
 * RemoteInterface/ListOfBoolHolder.java .
 * Generated by the IDL-to-Java compiler (portable), version "3.2"
 * from ./ServerRemote.idl
-* Wednesday, October 18, 2017 11:28:08 PM EDT
+* Saturday, October 21, 2017 12:57:13 AM EDT
 */
 
 public final class ListOfBoolHolder implements org.omg.CORBA.portable.Streamable
diff --git a/src/RemoteInterface/ListOfStringHelper.java b/src/RemoteInterface/ListOfStringHelper.java
index 4b5badc..bf3bbd2 100644
--- a/src/RemoteInterface/ListOfStringHelper.java
+++ b/src/RemoteInterface/ListOfStringHelper.java
@@ -5,7 +5,7 @@ package RemoteInterface;
 * RemoteInterface/ListOfStringHelper.java .
 * Generated by the IDL-to-Java compiler (portable), version "3.2"
 * from ./ServerRemote.idl
-* Wednesday, October 18, 2017 11:28:08 PM EDT
+* Saturday, October 21, 2017 12:57:13 AM EDT
 */
 
 abstract public class ListOfStringHelper
diff --git a/src/RemoteInterface/ListOfStringHolder.java b/src/RemoteInterface/ListOfStringHolder.java
index f31303e..9c77306 100644
--- a/src/RemoteInterface/ListOfStringHolder.java
+++ b/src/RemoteInterface/ListOfStringHolder.java
@@ -5,7 +5,7 @@ package RemoteInterface;
 * RemoteInterface/ListOfStringHolder.java .
 * Generated by the IDL-to-Java compiler (portable), version "3.2"
 * from ./ServerRemote.idl
-* Wednesday, October 18, 2017 11:28:08 PM EDT
+* Saturday, October 21, 2017 12:57:13 AM EDT
 */
 
 public final class ListOfStringHolder implements org.omg.CORBA.portable.Streamable
diff --git a/src/RemoteInterface/ServerRemote.java b/src/RemoteInterface/ServerRemote.java
index 1fb77f3..305ef24 100644
--- a/src/RemoteInterface/ServerRemote.java
+++ b/src/RemoteInterface/ServerRemote.java
@@ -5,7 +5,7 @@ package RemoteInterface;
 * RemoteInterface/ServerRemote.java .
 * Generated by the IDL-to-Java compiler (portable), version "3.2"
 * from ./ServerRemote.idl
-* Wednesday, October 18, 2017 11:28:08 PM EDT
+* Saturday, October 21, 2017 12:57:13 AM EDT
 */
 
 public interface ServerRemote extends ServerRemoteOperations, org.omg.CORBA.Object, org.omg.CORBA.portable.IDLEntity 
diff --git a/src/RemoteInterface/ServerRemoteHelper.java b/src/RemoteInterface/ServerRemoteHelper.java
index 8411c80..88ac841 100644
--- a/src/RemoteInterface/ServerRemoteHelper.java
+++ b/src/RemoteInterface/ServerRemoteHelper.java
@@ -5,7 +5,7 @@ package RemoteInterface;
 * RemoteInterface/ServerRemoteHelper.java .
 * Generated by the IDL-to-Java compiler (portable), version "3.2"
 * from ./ServerRemote.idl
-* Wednesday, October 18, 2017 11:28:08 PM EDT
+* Saturday, October 21, 2017 12:57:13 AM EDT
 */
 
 abstract public class ServerRemoteHelper
diff --git a/src/RemoteInterface/ServerRemoteHolder.java b/src/RemoteInterface/ServerRemoteHolder.java
index 25aaf2b..ba45a1a 100644
--- a/src/RemoteInterface/ServerRemoteHolder.java
+++ b/src/RemoteInterface/ServerRemoteHolder.java
@@ -4,7 +4,7 @@ package RemoteInterface;
 * RemoteInterface/ServerRemoteHolder.java .
 * Generated by the IDL-to-Java compiler (portable), version "3.2"
 * from ./ServerRemote.idl
-* Wednesday, October 18, 2017 11:28:08 PM EDT
+* Saturday, October 21, 2017 12:57:13 AM EDT
 */
 
 public final class ServerRemoteHolder implements org.omg.CORBA.portable.Streamable
diff --git a/src/RemoteInterface/ServerRemoteOperations.java b/src/RemoteInterface/ServerRemoteOperations.java
index 1dc13a1..74e6115 100644
--- a/src/RemoteInterface/ServerRemoteOperations.java
+++ b/src/RemoteInterface/ServerRemoteOperations.java
@@ -5,7 +5,7 @@ package RemoteInterface;
 * RemoteInterface/ServerRemoteOperations.java .
 * Generated by the IDL-to-Java compiler (portable), version "3.2"
 * from ./ServerRemote.idl
-* Wednesday, October 18, 2017 11:28:08 PM EDT
+* Saturday, October 21, 2017 12:57:13 AM EDT
 */
 
 public interface ServerRemoteOperations 
diff --git a/src/RemoteInterface/ServerRemotePOA.java b/src/RemoteInterface/ServerRemotePOA.java
index af8c480..a70f962 100644
--- a/src/RemoteInterface/ServerRemotePOA.java
+++ b/src/RemoteInterface/ServerRemotePOA.java
@@ -5,7 +5,7 @@ package RemoteInterface;
 * RemoteInterface/ServerRemotePOA.java .
 * Generated by the IDL-to-Java compiler (portable), version "3.2"
 * from ./ServerRemote.idl
-* Wednesday, October 18, 2017 11:28:08 PM EDT
+* Saturday, October 21, 2017 12:57:13 AM EDT
 */
 
 public abstract class ServerRemotePOA extends org.omg.PortableServer.Servant
diff --git a/src/RemoteInterface/_ServerRemoteStub.java b/src/RemoteInterface/_ServerRemoteStub.java
index 216f64f..fc6ca7d 100644
--- a/src/RemoteInterface/_ServerRemoteStub.java
+++ b/src/RemoteInterface/_ServerRemoteStub.java
@@ -5,7 +5,7 @@ package RemoteInterface;
 * RemoteInterface/_ServerRemoteStub.java .
 * Generated by the IDL-to-Java compiler (portable), version "3.2"
 * from ./ServerRemote.idl
-* Wednesday, October 18, 2017 11:28:08 PM EDT
+* Saturday, October 21, 2017 12:57:13 AM EDT
 */
 
 public class _ServerRemoteStub extends org.omg.CORBA.portable.ObjectImpl implements RemoteInterface.ServerRemote
diff --git a/src/RoomResrvSys/Record.java b/src/RoomResrvSys/Record.java
index b3395f3..6771267 100644
--- a/src/RoomResrvSys/Record.java
+++ b/src/RoomResrvSys/Record.java
@@ -1,18 +1,26 @@
 package RoomResrvSys;
 
 import java.text.DecimalFormat;
+import java.util.Date;
 
 public class Record {
 	private String timeSlot;
 	private boolean occupied;
 	private String recordId;
 	private String bookerId;
+	private Date date;
 	
-	public Record(String time, int id){
+	public Record(String time, int id, Date d){
 		timeSlot = time;
 		recordId = new String("RR"+new DecimalFormat("0000").format(id));
+		date = d;
 		occupied = false;
 		bookerId = null;
+		
+	}
+	
+	protected Date getDate() {
+		return date;
 	}
 	
 	protected String getTimeSlot(){
@@ -38,4 +46,8 @@ public class Record {
 	public void setOccupied(boolean b){
 		occupied = b;
 	}
+	
+	public void setDate(Date d) {
+		date = d;
+	}
 }
diff --git a/src/RoomResrvSys/RoomRecorder.java b/src/RoomResrvSys/RoomRecorder.java
index 75870b3..25a39e0 100644
--- a/src/RoomResrvSys/RoomRecorder.java
+++ b/src/RoomResrvSys/RoomRecorder.java
@@ -24,7 +24,7 @@ public class RoomRecorder {
 	private String campus;
 	private HashMap<Date, HashMap<Integer, ArrayList<Record>>> recordDateMap;
 	private HashMap<String, Record> bookingIDMap;
-	private HashMap<String, Integer> stuBkngCntMap;		//TODO: implement booking times limitation every week
+	private ArrayList<HashMap<String, Integer>> stuBkngCntMap;  	
 	private Thread thread;
 	private int port;
 	private ReadWriteLock lock;
@@ -37,7 +37,9 @@ public class RoomRecorder {
 	public RoomRecorder(String camp, int listenPort){
 		recordDateMap = new HashMap<Date, HashMap<Integer, ArrayList<Record>>>();
 		bookingIDMap = new HashMap<String, Record>();
-		stuBkngCntMap = new HashMap<String, Integer>();
+		stuBkngCntMap = new ArrayList<HashMap<String, Integer>>(55);
+		for(int i=0; i<55; i++)
+			stuBkngCntMap.add(null);
 		campus = camp;
 		port = listenPort;
 		lock = new ReentrantReadWriteLock();
@@ -85,11 +87,11 @@ public class RoomRecorder {
 				InetAddress targetAddr = packet.getAddress();
 				int targetPort = packet.getPort();
 				DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
-				Date date = null;
 				
 				String receive = new String(packet.getData(), 0, packet.getLength());
 				String[] parts = receive.split(" ");
-				if(parts.length==2 && parts[0].equals("GetAvailTimeSlot")) {					
+				if(parts.length==2 && parts[0].equals("GetAvailTimeSlot")) {	
+					Date date = null;
 					int cnt = 0;
 					try {
 						date = dateFormat.parse(parts[1]);
@@ -103,22 +105,36 @@ public class RoomRecorder {
 					SendUDPDatagram(socket, sent, targetAddr, targetPort);
 				}
 				// params: DecreaseStuCounting DVL10000
-				else if(parts.length==2 && parts[0].equals("DecreaseStuCounting")) {
+				else if(parts.length==3 && parts[0].equals("DecreaseStuCounting")) {
 					String stu_id = parts[1];
+					String s_date = parts[2];
+					Date date;
+					try {
+						date = dateFormat.parse(s_date);
+					} catch (ParseException e) {
+						e.printStackTrace();
+						continue;
+					}
 					
 					lock.writeLock().lock();
-					Integer cnt = stuBkngCntMap.get(stu_id);
-					if(cnt!=null && cnt>0)
-						stuBkngCntMap.put(stu_id, cnt-1);
+					stuBkngCntDecrement(stu_id, date);
 					lock.writeLock().unlock();
 				}
 				// params: CancelBook DVL123481759134 DVL10000
 				else if(parts.length==3 && parts[0].equals("CancelBook")) {
 					String bookingID = parts[1];
 					String stu_id = parts[2];
+					SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
 					
+					Record record = bookingIDMap.get(bookingID);
 					boolean ret = CancelBook(bookingID, stu_id);
-					String message = String.valueOf(ret);
+					String message;
+					
+					// Return "false" to main server if fail, and the record date if success
+					if(ret == false)
+						message = String.valueOf(ret);
+					else
+						message = df.format(record.getDate());
 					SendUDPDatagram(socket, message, targetAddr, targetPort);
 				}
 				//params: Book DVL10000 DVL 2017-9-18 201 7:30-9:30
@@ -127,6 +143,8 @@ public class RoomRecorder {
 					String targetCampus = parts[2];
 					int room = Integer.parseInt(parts[4]);
 					String timeslot = parts[5];
+					Date date = null;
+					
 					try {
 						date = dateFormat.parse(parts[3]);
 					} catch (ParseException e) {
@@ -151,8 +169,7 @@ public class RoomRecorder {
 		
 		if(stu_id.contains(campus)) {
 			// Check if the booking count of students was the maximum count.
-			Integer bookingCnt = stuBkngCntMap.get(stu_id);
-			if(bookingCnt!=null&&bookingCnt>=3)
+			if(getStuBkngCnt(stu_id, date) == 3)
 				return null;
 		}
 		
@@ -174,11 +191,7 @@ public class RoomRecorder {
 			record.setOccupied(true);
 			if(stu_id.contains(campus)) {
 				// Increase the booking count of students if the operation was ran on local server
-				Integer bookingCnt = stuBkngCntMap.get(stu_id);
-				if(bookingCnt == null)
-					stuBkngCntMap.put(stu_id, 1);
-				else if(bookingCnt < 3)
-					stuBkngCntMap.put(stu_id, bookingCnt+1);
+				stuBkngCntIncrement(stu_id, date);
 			}
 			lock.writeLock().unlock();
 			
@@ -213,11 +226,7 @@ public class RoomRecorder {
 			}
 			
 			lock.writeLock().lock();
-			Integer bookingCnt = stuBkngCntMap.get(stu_id);
-			if(bookingCnt == null)
-				stuBkngCntMap.put(stu_id, 1);
-			else if(bookingCnt < 3)
-				stuBkngCntMap.put(stu_id, bookingCnt+1);
+			stuBkngCntIncrement(stu_id, date);
 			lock.writeLock().unlock();
 			
 			return bookingID;
@@ -239,10 +248,9 @@ public class RoomRecorder {
 				
 				if(stu_id.contains(campus)) {
 					// 濡傛灉褰撳墠鐢ㄦ埛鍦ㄦ湰鍦版湇鍔″櫒涓婅繘琛屼簡鍙栨秷鎿嶄綔锛屽垯鍙互鐩存帴瀵规湰鍦拌〃杩涜鎿嶄綔
-					Integer bookingCnt = stuBkngCntMap.get(record.getBookerID());
-					if(bookingCnt==null || bookingCnt==0)
+					if(getStuBkngCnt(stu_id, record.getDate()) == 0)
 						return false;
-					stuBkngCntMap.put(record.getBookerID(), bookingCnt-1);
+					stuBkngCntDecrement(stu_id, record.getDate());
 				}
 				
 				bookingIDMap.remove(bookingID);
@@ -275,18 +283,28 @@ public class RoomRecorder {
 				return false;
 			}
 			this.SendUDPDatagram(socket, message, targetIP, targetPort);
+			
+			// Return date of record if success, else return null or false
 			String returnVal = this.ReceiveUDPDatagram(socket);
 			if(returnVal==null || returnVal.equals("false"))
 				return false;
 			else {
 				// 鍑忓皬鐢ㄦ埛鐨勬�婚璁㈡鏁� - booking cnt
 				lock.writeLock().lock();
-				Integer bookingCnt = stuBkngCntMap.get(stu_id);
-				if(bookingCnt==null || bookingCnt==0)
+				SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
+				Date date = null;
+				try {
+					date = df.parse(returnVal);
+					if(getStuBkngCnt(stu_id, date) == 0)
+						return false;
+					stuBkngCntDecrement(stu_id, date);
+				} catch (ParseException e) {
+					e.printStackTrace();
 					return false;
-				stuBkngCntMap.put(stu_id, bookingCnt-1);
-				lock.writeLock().unlock();
-				
+				} finally {
+					lock.writeLock().unlock();
+				}
+							
 				return true;
 			}	
 		}
@@ -312,7 +330,7 @@ public class RoomRecorder {
 			submap.put(room, new ArrayList<Record>());
 			records = submap.get(room);
 		}
-		Record record = new Record(timeSlot, record_id);
+		Record record = new Record(timeSlot, record_id, date);
 		IncrementRecordID();
 		records.add(record);
 		lock.writeLock().unlock();
@@ -344,8 +362,9 @@ public class RoomRecorder {
 					
 					DatagramSocket socket;
 					try {
+						SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
 						socket = new DatagramSocket();
-						String message = "DecreaseStuCounting " + bookerID; 
+						String message = "DecreaseStuCounting " + bookerID + " " + df.format(del.getDate()); 
 						SendUDPDatagram(socket, message, InetAddress.getByName("127.0.0.1"), port);
 					} catch (SocketException | UnknownHostException e) {
 						e.printStackTrace();
@@ -382,6 +401,32 @@ public class RoomRecorder {
 		
 		return cnt;
 	}
+	
+	
+	public boolean ChangeReservation (String stu_id, String booking_id, String new_campus_name, 
+										int new_room_no, String new_timeslot) {
+		// How to know which day the user want to change?
+		// Add an extra argument -- Date date
+		
+		
+		
+		/**
+		stuBkngCntDecrement(stu_id, date);		// In order to success when booking counts reach 3 in this case.
+		String bookingID = Book(stu_id, new_campus_name, date, new_room_no, new_timeslot);
+		stuBkngCntIncrement(stu_id, date);
+		if(bookingID == null)
+			return false;
+		boolean ret = CancelBook(booking_id, stu_id);
+		stuBkngCntIncrement(stu_id, date);
+		if(ret == false){
+			// TODO Cancel the previous booking
+			
+			return false;
+		}
+		**/
+		
+		return true;
+	}
 
 	
 	private synchronized static void IncrementRecordID(){
@@ -459,6 +504,60 @@ public class RoomRecorder {
 	}
 	
 	
+	private boolean stuBkngCntIncrement(String stu_id, Date date) {
+		Calendar cal = Calendar.getInstance();
+		cal.setTime(date);
+		int week = cal.get(Calendar.WEEK_OF_YEAR);
+		
+		HashMap<String, Integer> stuMap = stuBkngCntMap.get(week);
+		if(stuMap == null) {
+			stuMap = new HashMap<String, Integer>();
+			stuBkngCntMap.set(week, stuMap);
+		}
+		
+		Integer cnt = stuMap.get(stu_id);
+		if(cnt!=null && cnt==3)
+			return false;
+		
+		if(cnt == null)
+			stuMap.put(stu_id, 1);
+		else
+			stuMap.put(stu_id, cnt+1);
+		
+		return true;
+	}
+	
+	private boolean stuBkngCntDecrement(String stu_id, Date date) {
+		Calendar cal = Calendar.getInstance();
+		cal.setTime(date);
+		int week = cal.get(Calendar.WEEK_OF_YEAR);
+		
+		if(getStuBkngCnt(stu_id, date) == 0)
+			return false;
+		HashMap<String, Integer> stuMap = stuBkngCntMap.get(week);
+		Integer cnt = stuMap.get(stu_id);
+		stuMap.put(stu_id, cnt-1);
+		
+		return false;
+	}
+	
+	private int getStuBkngCnt(String stu_id, Date date) {
+		Calendar cal = Calendar.getInstance();
+		cal.setTime(date);
+		int week = cal.get(Calendar.WEEK_OF_YEAR);
+		
+		HashMap<String, Integer> stuMap = stuBkngCntMap.get(week);
+		if(stuMap == null)
+			return 0;
+		Integer cnt = stuMap.get(stu_id);
+		if(cnt == null || cnt == 0)
+			return 0;
+		else
+			return cnt;
+	}
+	
+	
+	
 	public void PrintMap(){
 		for(Date item : recordDateMap.keySet()){
 			System.out.println(item + ":");
diff --git a/src/RoomResrvSys/ServerRemoteImpl.java b/src/RoomResrvSys/ServerRemoteImpl.java
index aa5a79a..280734f 100644
--- a/src/RoomResrvSys/ServerRemoteImpl.java
+++ b/src/RoomResrvSys/ServerRemoteImpl.java
@@ -11,6 +11,7 @@ import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Date;
 
 import org.omg.CORBA.ORBPackage.InvalidName;
 import org.omg.CORBA_2_3.ORB;
@@ -170,10 +171,23 @@ public class ServerRemoteImpl extends ServerRemotePOA {
 	
 	
 	@Override
-	public boolean ChangeReservation (String booking_id, String new_campus_name, String new_room_no, String new_timeslot){
-		//TODO
+	public boolean ChangeReservation (String stu_id, String booking_id, String new_campus_name, 
+										String new_room_no,  String new_timeslot){
+		// TODO Add log message
+		// Must I pass the stu_id and new_date parameters? Is there a method to build connection?
+		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
+		Date date = null;
+		try {
+			date = df.parse(new_date);
+		} catch (ParseException e) {
+			e.printStackTrace();
+			return false;
+		}
 		
-		return false;
+		boolean ret = roomRecorder.ChangeReservation(stu_id, booking_id, campus, 
+											Integer.parseInt(new_room_no), date, new_timeslot);
+		
+		return ret;
 	}
 
 	
diff --git a/src/RoomResrvSys/StudentClient.java b/src/RoomResrvSys/StudentClient.java
index bad584e..3a506a8 100644
--- a/src/RoomResrvSys/StudentClient.java
+++ b/src/RoomResrvSys/StudentClient.java
@@ -93,7 +93,7 @@ public class StudentClient extends Client {
 			
 			// Test booking limitation
 			{
-				for(int i=1; i<=2; i++)
+				for(int i=0; i<2; i++)
 				{
 					String bookingID = student.Book("DVL", date2, (short)201, timeSlots[i]);
 					String availTimeSlots = student.GetAvailableTimeSlot(date2);
@@ -102,21 +102,21 @@ public class StudentClient extends Client {
 				}
 				
 				System.out.println("\n\n");
-				String bookingID = student.Book("KKL", date2, (short)201, "10:00-12:30");
+				String bookingID = student.Book("KKL", date2, (short)201, timeSlots[0]);		//Should success
 				String availTimeSlots = student.GetAvailableTimeSlot(date2);
 				System.out.println(bookingID + " " + availTimeSlots);
 				
 				
-				String bookingID2 = student.Book("KKL", date2, (short)201, timeSlots[3]);
+				String bookingID2 = student.Book("KKL", date2, (short)201, timeSlots[1]);		//Should fail
 				availTimeSlots = student.GetAvailableTimeSlot(date2);
 				System.out.println(bookingID2 + " " + availTimeSlots);
-				
-				boolean ret = student.CancelBook(bookingID);
+					
+				boolean ret = student.CancelBook(bookingID);			// Should success
 				System.out.println("Cancel booking: " + ret);
 				availTimeSlots = student.GetAvailableTimeSlot(date2);
 				System.out.println(availTimeSlots);
 				
-				bookingID2 = student.Book("KKL", date2, (short)201, timeSlots[3]);
+				bookingID2 = student.Book("KKL", date2, (short)201, timeSlots[2]);		// Should success
 				availTimeSlots = student.GetAvailableTimeSlot(date2);
 				System.out.println(bookingID2 + " " + availTimeSlots);
 			}			
diff --git a/src/ServerRemote.idl b/src/ServerRemote.idl
index 6fec4d7..f98e419 100644
--- a/src/ServerRemote.idl
+++ b/src/ServerRemote.idl
@@ -10,7 +10,7 @@ module RemoteInterface{
 		string Book(in string stu_id, in string campus, in string date, in unsigned short room, in string timeslots);
 		boolean CancelBook(in string booking_id, in string stu_id);
 		string GetAvailTimeSlots(in string date);
-		boolean ChangeReservation(in string booking_id, in string new_campus_name, 
+		boolean ChangeReservation(in string stu_id, in string booking_id, in string new_campus_name, 
 										in string new_room_no, in string new_timeslot);
 	};
 };
diff --git a/src/orb.db/NC0 b/src/orb.db/NC0
index a7946b4..29a875a 100644
Binary files a/src/orb.db/NC0 and b/src/orb.db/NC0 differ
