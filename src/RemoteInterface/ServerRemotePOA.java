package RemoteInterface;


/**
* RemoteInterface/ServerRemotePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ./ServerRemote.idl
* Wednesday, November 15, 2017 10:37:45 PM EST
*/

public abstract class ServerRemotePOA extends org.omg.PortableServer.Servant
 implements RemoteInterface.ServerRemoteOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("login", new java.lang.Integer (0));
    _methods.put ("createRoom", new java.lang.Integer (1));
    _methods.put ("deleteRoom", new java.lang.Integer (2));
    _methods.put ("bookRoom", new java.lang.Integer (3));
    _methods.put ("cancelBook", new java.lang.Integer (4));
    _methods.put ("getAvailableTimeslot", new java.lang.Integer (5));
    _methods.put ("changeReservation", new java.lang.Integer (6));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // RemoteInterface/ServerRemote/login
       {
         String id = in.read_string ();
         boolean $result = false;
         $result = this.login (id);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 1:  // RemoteInterface/ServerRemote/createRoom
       {
         String id = in.read_string ();
         String room = in.read_string ();
         String date = in.read_string ();
         String timeslots[] = RemoteInterface.ListOfStringHelper.read (in);
         String $result[] = null;
         $result = this.createRoom (id, room, date, timeslots);
         out = $rh.createReply();
         RemoteInterface.ListOfStringHelper.write (out, $result);
         break;
       }

       case 2:  // RemoteInterface/ServerRemote/deleteRoom
       {
         String id = in.read_string ();
         String room = in.read_string ();
         String date = in.read_string ();
         String timeslots[] = RemoteInterface.ListOfStringHelper.read (in);
         boolean $result[] = null;
         $result = this.deleteRoom (id, room, date, timeslots);
         out = $rh.createReply();
         RemoteInterface.ListOfBoolHelper.write (out, $result);
         break;
       }

       case 3:  // RemoteInterface/ServerRemote/bookRoom
       {
         String stu_id = in.read_string ();
         String campus = in.read_string ();
         String room = in.read_string ();
         String date = in.read_string ();
         String timeslots = in.read_string ();
         String $result = null;
         $result = this.bookRoom (stu_id, campus, room, date, timeslots);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 4:  // RemoteInterface/ServerRemote/cancelBook
       {
         String stu_id = in.read_string ();
         String bookingID = in.read_string ();
         boolean $result = false;
         $result = this.cancelBook (stu_id, bookingID);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 5:  // RemoteInterface/ServerRemote/getAvailableTimeslot
       {
         String id = in.read_string ();
         String date = in.read_string ();
         String $result = null;
         $result = this.getAvailableTimeslot (id, date);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 6:  // RemoteInterface/ServerRemote/changeReservation
       {
         String stu_id = in.read_string ();
         String old_booking_id = in.read_string ();
         String new_campus_name = in.read_string ();
         String new_room_no = in.read_string ();
         String new_timeslot = in.read_string ();
         String $result = null;
         $result = this.changeReservation (stu_id, old_booking_id, new_campus_name, new_room_no, new_timeslot);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:RemoteInterface/ServerRemote:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public ServerRemote _this() 
  {
    return ServerRemoteHelper.narrow(
    super._this_object());
  }

  public ServerRemote _this(org.omg.CORBA.ORB orb) 
  {
    return ServerRemoteHelper.narrow(
    super._this_object(orb));
  }


} // class ServerRemotePOA
